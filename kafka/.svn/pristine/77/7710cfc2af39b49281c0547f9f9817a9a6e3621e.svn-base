package com.kentrasoft.kafka.controller;

import com.kentrasoft.kafka.service.KafkaProducer;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import javax.servlet.http.HttpServletRequest;
import java.io.*;

@RestController
@RequestMapping("kafka")
public class KafkaController {

    private Log log = LogFactory.getLog(KafkaController.class);

    @Autowired
    private KafkaProducer kafkaProducer;

    @RequestMapping("send.do")
    public Object send(HttpServletRequest request){

        InputStream is = null;
        //获取请求参数
        try{
            is = request.getInputStream();
            //读取输入流，即参数内容
            StringBuffer sbResult = new StringBuffer();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String line = "";
            while ((line = br.readLine()) != null) {
                sbResult.append(line);
            }
            log.info("接收上报数据：" +sbResult);
            kafkaProducer.sendToUpload(sbResult.toString());
        }catch (Exception e) {
            e.printStackTrace();
        }finally{
            if(is != null){
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        return 1;
    }

    @RequestMapping("sendToCallback.do")
    public Object sendToCallback(HttpServletRequest request){

        InputStream is = null;
        //获取请求参数
        try{
            is = request.getInputStream();
            //读取输入流，即参数内容
            StringBuffer sbResult = new StringBuffer();
            BufferedReader br = new BufferedReader(new InputStreamReader(is));
            String line = "";
            while ((line = br.readLine()) != null) {
                sbResult.append(line);
            }
            log.info("接收回调数据：" +sbResult);
            kafkaProducer.sendToCallback(sbResult.toString());
        }catch (Exception e) {
            e.printStackTrace();
        }finally{
            if(is != null){
                try {
                    is.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        return 1;
    }

    @RequestMapping("sendTestUpload.do")
    private Object sendTestUpload(String param){
        kafkaProducer.sendToUpload(param);
        return "upload";
    }

    @RequestMapping("sendTestCallback.do")
    private Object sendTestCallback(String param){
        kafkaProducer.sendToCallback(param);
        return "callback";
    }

    @RequestMapping("test.do")
    private Object test(){
        log.info("执行test方法");
        return "test";
    }
}
